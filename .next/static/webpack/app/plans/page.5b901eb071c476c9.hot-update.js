"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/plans/page",{

/***/ "(app-pages-browser)/./src/lib/store.ts":
/*!**************************!*\
  !*** ./src/lib/store.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAuthStore: function() { return /* binding */ useAuthStore; },\n/* harmony export */   usePlanStore: function() { return /* binding */ usePlanStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\nconst useAuthStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((set)=>({\n        user: null,\n        isAuthenticated: false,\n        login: (user)=>set({\n                user,\n                isAuthenticated: true\n            }),\n        logout: ()=>set({\n                user: null,\n                isAuthenticated: false\n            }),\n        register: async (name, email, password)=>{\n            try {\n                const response = await fetch(\"/api/auth/register\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        name,\n                        email,\n                        password\n                    })\n                });\n                const data = await response.json();\n                if (!response.ok) {\n                    return {\n                        success: false,\n                        error: data.error\n                    };\n                }\n                set({\n                    user: data,\n                    isAuthenticated: true\n                });\n                return {\n                    success: true\n                };\n            } catch (error) {\n                return {\n                    success: false,\n                    error: \"Registration failed\"\n                };\n            }\n        }\n    }));\nconst usePlanStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        currentPlan: null,\n        plans: [],\n        isLoading: false,\n        error: null,\n        setPlan: (plan)=>set({\n                currentPlan: plan,\n                error: null\n            }),\n        updateTask: async (taskId, completed)=>{\n            const currentPlan = get().currentPlan;\n            if (!currentPlan) {\n                return {\n                    success: false,\n                    error: \"No plan found\"\n                };\n            }\n            if (!currentPlan.id) {\n                return {\n                    success: false,\n                    error: \"Plan ID is missing\"\n                };\n            }\n            // 乐观更新\n            const updatedPlan = {\n                ...currentPlan,\n                tasks: currentPlan.tasks.map((task)=>task.id === taskId ? {\n                        ...task,\n                        completed\n                    } : task)\n            };\n            set({\n                currentPlan: updatedPlan,\n                error: null\n            });\n            try {\n                set({\n                    isLoading: true\n                });\n                const response = await fetch(\"/api/plans/\".concat(currentPlan.id, \"/tasks/\").concat(taskId), {\n                    method: \"PATCH\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        completed\n                    })\n                });\n                const data = await response.json();\n                if (!response.ok) {\n                    // 如果请求失败，回滚到原始状态\n                    set({\n                        currentPlan,\n                        error: data.error\n                    });\n                    return {\n                        success: false,\n                        error: data.error\n                    };\n                }\n                // 更新当前计划\n                set({\n                    currentPlan: data,\n                    error: null\n                });\n                return {\n                    success: true\n                };\n            } catch (error) {\n                // 如果请求失败，回滚到原始状态\n                set({\n                    currentPlan,\n                    error: \"Failed to update task\"\n                });\n                return {\n                    success: false,\n                    error: \"Failed to update task\"\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        savePlan: async (plan)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/plans\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(plan)\n                });\n                const data = await response.json();\n                if (!response.ok) {\n                    set({\n                        error: data.error\n                    });\n                    return {\n                        success: false,\n                        error: data.error\n                    };\n                }\n                set((state)=>({\n                        currentPlan: data,\n                        plans: [\n                            ...state.plans,\n                            data\n                        ],\n                        error: null\n                    }));\n                return {\n                    success: true\n                };\n            } catch (error) {\n                set({\n                    error: \"Failed to save plan\"\n                });\n                return {\n                    success: false,\n                    error: \"Failed to save plan\"\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        updatePlan: async (plan)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/plans/\".concat(plan.id), {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(plan)\n                });\n                const data = await response.json();\n                if (!response.ok) {\n                    set({\n                        error: data.error\n                    });\n                    return {\n                        success: false,\n                        error: data.error\n                    };\n                }\n                set((state)=>({\n                        currentPlan: data,\n                        plans: state.plans.map((p)=>p.id === data.id ? data : p),\n                        error: null\n                    }));\n                return {\n                    success: true\n                };\n            } catch (error) {\n                set({\n                    error: \"Failed to update plan\"\n                });\n                return {\n                    success: false,\n                    error: \"Failed to update plan\"\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        deletePlan: async (planId)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/plans/\".concat(planId), {\n                    method: \"DELETE\"\n                });\n                if (!response.ok) {\n                    const data = await response.json();\n                    set({\n                        error: data.error\n                    });\n                    return {\n                        success: false,\n                        error: data.error\n                    };\n                }\n                set((state)=>{\n                    var _state_currentPlan;\n                    return {\n                        currentPlan: ((_state_currentPlan = state.currentPlan) === null || _state_currentPlan === void 0 ? void 0 : _state_currentPlan.id) === planId ? null : state.currentPlan,\n                        plans: state.plans.filter((p)=>p.id !== planId),\n                        error: null\n                    };\n                });\n                return {\n                    success: true\n                };\n            } catch (error) {\n                set({\n                    error: \"Failed to delete plan\"\n                });\n                return {\n                    success: false,\n                    error: \"Failed to delete plan\"\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        fetchPlans: async (userId)=>{\n            try {\n                set({\n                    isLoading: true,\n                    error: null\n                });\n                const response = await fetch(\"/api/plans?userId=\".concat(userId));\n                const data = await response.json();\n                if (!response.ok) {\n                    set({\n                        error: data.error\n                    });\n                    return {\n                        success: false,\n                        error: data.error\n                    };\n                }\n                set({\n                    plans: data,\n                    error: null\n                });\n                return {\n                    success: true,\n                    data\n                };\n            } catch (error) {\n                set({\n                    error: \"Failed to fetch plans\"\n                });\n                return {\n                    success: false,\n                    error: \"Failed to fetch plans\"\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        }\n    }), {\n    name: \"study-plan-storage\",\n    partialize: (state)=>({\n            currentPlan: state.currentPlan,\n            plans: state.plans\n        })\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/store.ts\n"));

/***/ })

});